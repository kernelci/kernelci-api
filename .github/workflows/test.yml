# This is a basic workflow to help you get started with Actions

name: test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the
  # main branch
  push:
    branches: [  main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:

      - name: Check out source code
        uses: actions/checkout@v2

      - name: Export environment variables
        run: |
          echo "SECRET_KEY=b6451545d2e4635148d768f07877aade3ad8e7e160d52962badd7587a4b9a150" > .env
          echo "SMTP_HOST=smtp.gmail.com" >> .env
          echo "SMTP_PORT=465" >> .env
          echo "EMAIL_SENDER=test@kernelci.org" >> .env
          echo "EMAIL_PASSWORD=random" >> .env

      - name: Install necessary packages
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y docker-compose docker.io

      - name: Build docker images
        run: docker-compose -f test-docker-compose.yaml build --no-cache

      - name: Run API containers
        run: |
          docker-compose -f test-docker-compose.yaml up -d api db redis storage ssh test

      - name: Run unit tests
        run: |
          docker-compose -f test-docker-compose.yaml exec -T test pytest -vs tests/unit_tests

      - name: Run e2e tests
        run: |
          docker-compose -f test-docker-compose.yaml exec -T test pytest -v tests/e2e_tests

      - name: Stop docker containers
        if: always()
        run: |
          docker-compose -f test-docker-compose.yaml down
